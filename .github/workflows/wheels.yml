name: CI (wheels and sdist)

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  sdist:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install system dependencies
        run: sudo apt-get install --yes libopenblas-dev libfftw3-dev

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: build sdist
        run: python setup.py sdist

      - name: upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: sdist
          path: "dist/*.tar.gz"
          if-no-files-found: error

      # - name: Publish to PyPI
      #   if: startsWith(github.ref, 'refs/tags/')
      #   env:
      #     TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
      #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      #   run: |
      #     pip install twine
      #     twine upload --skip-existing dist/*.tar.gz

  wheel:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            name: mac

          # - os: macos-latest
          #   name: mac-arm
          #   cibw:
          #     arch: universal2
          #     build: "cp39*"

          - os: ubuntu-latest
            name: manylinux1
            cibw:
              build: "cp36* cp37*"
              manylinux_image: manylinux1

          - os: ubuntu-latest
            name: manylinux2010
            cibw:
              build: "cp38* cp39* pp3*"
              manylinux_image: manylinux2010

          # - os: ubuntu-latest
          #   name: cp36-manylinux_aarch64
          #   cibw:
          #     build: "cp3*"
          #     manylinux_image: manylinux2014
          #     arch: aarch64

          # - os: windows-latest
          #   name: win32
          #   architecture: x86
          #   cibw:
          #     build: "cp*win32"

          # - os: windows-2016
          #   name: win32-pypy
          #   architecture: x86
          #   cibw:
          #     build: "pp*win32"

          # - os: windows-latest
          #   name: win_amd64
          #   architecture: x64
          #   cibw:
          #     build: "*win_amd64"

        # os: ["ubuntu-latest"]
        # python-version: [3.6, 3.7, 3.8, 3.9]

    env:
      MACOSX_DEPLOYMENT_TARGET: "10.9"
      CIBW_BUILD_VERBOSITY: "1"

      CIBW_BEFORE_ALL_MACOS: "brew install fftw openblas"
      CIBW_BEFORE_ALL_LINUX: "yum -y install openblas-devel fftw-devel"

      # CIBW_BUILD: "${{ matrix.cibw.build || '*' }}"
      # CIBW_MANYLINUX_X86_64_IMAGE: "${{ matrix.cibw.manylinux_image }}"
      # CIBW_MANYLINUX_I686_IMAGE: "${{ matrix.cibw.manylinux_image }}"
      # CIBW_MANYLINUX_AARCH64_IMAGE: "${{ matrix.cibw.manylinux_image }}"
      # CIBW_ARCHS_LINUX: "${{ matrix.cibw.arch || 'auto' }}"
      # CIBW_ARCHS_MACOS: "${{ matrix.cibw.arch || 'auto' }}"
      # CIBW_BEFORE_TEST: pip install {package} -r requirements-dev.txt
      # CIBW_TEST_REQUIRES: "pytest"
      # CIBW_TEST_COMMAND: pytest {package}

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: ${{ matrix.architecture }}

      - name: customize mac-arm-64
        if: contains(matrix.os, 'macos') && matrix.cibw.arch
        run: |
          sudo xcode-select -switch /Applications/Xcode_12.2.app
          echo 'SDKROOT=/Applications/Xcode_12.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk' >> "$GITHUB_ENV"
          echo 'MACOSX_DEPLOYMENT_TARGET=10.15' >> "$GITHUB_ENV"

      - name: install dependencies
        run: |
          pip install --upgrade setuptools pip wheel
          pip install -r requirements-dev.txt
          pip install cibuildwheel

      - name: install mac dependencies
        if: startsWith(matrix.os, 'mac')
        run: |
          pip install delocate

      - name: install linux dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          pip install auditwheel

      - name: show environment
        run: |
          pip freeze

      - name: list target wheels
        run: |
          python -m cibuildwheel . --print-build-identifiers

      # - name: compile Cython sources
      #   run: |
      #     python setup.py cython

      - name: build wheels
        run: |
          python -m cibuildwheel .

      - uses: actions/upload-artifact@v2
        with:
          name: wheels-${{ matrix.name }}
          path: "wheelhouse/*"
          if-no-files-found: error

      # - name: customize aarch64
      #   if: contains(matrix.cibw.arch, 'aarch64')
      #   # install zeromq-devel because building libzmq for arm takes too long
      #   # it's not in default packages, but it is in epel-7
      #   # this will be an older release than than other wheels
      #   run: |
      #     echo '${{ matrix.cibw.arch }}'
      #     echo 'CIBW_BEFORE_ALL_LINUX=yum -y install openblas-devel fftw-devel' >> "$GITHUB_ENV"

      # - name: Setup Miniconda
      #   uses: conda-incubator/setup-miniconda@v2
      #   env:
      #     ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
      #   with:
      #     auto-update-conda: true
      #     auto-activate-base: false
      #     miniconda-version: "latest"
      #     python-version: ${{ matrix.python-version }}
      #     environment-file: environment-dev.yml
      #     activate-environment: mrsimulator-dev
      # - run: |
      #     conda --version
      #     which python
      # - name: Build and install package from source
      #   shell: pwsh
      #   run: |
      #     conda --version
      #     which python
      #     python setup_conda.py develop
      # - name: Test with pytest
      #   shell: pwsh
      #   run: pytest --cov=./ --cov-report=xml
      # - name: Upload coverage
      #   uses: codecov/codecov-action@v1

      # - name: install cibuildwheel
      #   shell: pwsh
      #   run: |
      #     python -m pip install --upgrade setuptools pip wheel
      #     python -m pip install cibuildwheel
      # - name: install mac dependencies
      #   shell: pwsh
      #   if: startsWith(matrix.os, 'mac')
      #   run: |
      #     python -m pip install delocate
      # - name: install linux dependencies
      #   shell: pwsh
      #   if: startsWith(matrix.os, 'ubuntu')
      #   run: |
      #     python -m pip install auditwheel

      # - name: show environment
      #   shell: pwsh
      #   run: |
      #     python -m pip freeze

      # - name: list target wheels
      #   shell: pwsh
      #   run: |
      #     python -m cibuildwheel . --print-build-identifiers

      # - name: build wheels
      #   shell: pwsh
      #   run: |
      #     python -m cibuildwheel .

      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: wheels-${{ matrix.name }}
      #     path: "wheelhouse/*"
      #     if-no-files-found: error
