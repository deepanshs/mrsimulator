name: CI (conda)

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  sdist:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install system dependencies
        run: sudo apt-get install --yes libopenblas-dev libfftw3-dev

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: build sdist
        run: python setup.py sdist

      - name: upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: sdist
          path: "dist/*.tar.gz"
          if-no-files-found: error

      # - name: Publish to PyPI
      #   if: startsWith(github.ref, 'refs/tags/')
      #   env:
      #     TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
      #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      #   run: |
      #     pip install twine
      #     twine upload --skip-existing dist/*.tar.gz

  # build:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: ["ubuntu-latest", "macos-latest", "windows-latest"]
  #       python-version: [3.6, 3.7, 3.8, 3.9]
  #   runs-on: ${{ matrix.os }}

  #   env:
  #     MACOSX_DEPLOYMENT_TARGET: "10.9"
  #     CIBW_BUILD_VERBOSITY: "1"

  #     # CIBW_BUILD: "${{ matrix.cibw.build || '*' }}"
  #     # CIBW_MANYLINUX_X86_64_IMAGE: "${{ matrix.cibw.manylinux_image }}"
  #     # CIBW_MANYLINUX_I686_IMAGE: "${{ matrix.cibw.manylinux_image }}"
  #     # CIBW_MANYLINUX_AARCH64_IMAGE: "${{ matrix.cibw.manylinux_image }}"
  #     # CIBW_ARCHS_LINUX: "${{ matrix.cibw.arch || 'auto' }}"
  #     # CIBW_ARCHS_MACOS: "${{ matrix.cibw.arch || 'auto' }}"
  #     CIBW_TEST_REQUIRES: "pytest"
  #     CIBW_TEST_COMMAND: pytest {package}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2.3.4
  #     - name: Setup Miniconda
  #       uses: conda-incubator/setup-miniconda@v2
  #       env:
  #         ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
  #       with:
  #         auto-update-conda: true
  #         auto-activate-base: false
  #         miniconda-version: "latest"
  #         python-version: ${{ matrix.python-version }}
  #         environment-file: environment-dev.yml
  #         activate-environment: mrsimulator-dev
  #     - run: |
  #         conda --version
  #         which python
  #     - name: Build and install package from source
  #       shell: pwsh
  #       run: |
  #         conda --version
  #         which python
  #         python setup_conda.py develop
  #     - name: Test with pytest
  #       shell: pwsh
  #       run: pytest --cov=./ --cov-report=xml
  #     - name: Upload coverage
  #       uses: codecov/codecov-action@v1

  #     - name: install cibuildwheel
  #       shell: pwsh
  #       run: |
  #         python -m pip install --upgrade setuptools pip wheel
  #         python -m pip install cibuildwheel
  #     - name: install mac dependencies
  #       shell: pwsh
  #       if: startsWith(matrix.os, 'mac')
  #       run: |
  #         python -m pip install delocate
  #     - name: install linux dependencies
  #       shell: pwsh
  #       if: startsWith(matrix.os, 'ubuntu')
  #       run: |
  #         python -m pip install auditwheel

  #     - name: show environment
  #       shell: pwsh
  #       run: |
  #         python -m pip freeze

  #     - name: list target wheels
  #       shell: pwsh
  #       run: |
  #         python -m cibuildwheel . --print-build-identifiers

  #     - name: build wheels
  #       shell: pwsh
  #       run: |
  #         python -m cibuildwheel .

  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: wheels-${{ matrix.name }}
  #         path: "wheelhouse/*"
  #         if-no-files-found: error
